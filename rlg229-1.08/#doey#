==31776== Memcheck, a memory error detector
==31776== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==31776== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==31776== Command: ./rlg229
==31776== Parent PID: 31366
==31776== 
==31776== Conditional jump or move depends on uninitialised value(s)
==31776==    at 0x3C95E17D6B: index (strchr.S:59)
==31776==    by 0x3C95E079C7: expand_dynamic_string_token (dl-load.c:430)
==31776==    by 0x3C95E0825C: _dl_map_object (dl-load.c:2288)
==31776==    by 0x3C95E0171D: map_doit (rtld.c:631)
==31776==    by 0x3C95E0ECA5: _dl_catch_error (dl-error.c:178)
==31776==    by 0x3C95E00EE3: do_preload (rtld.c:820)
==31776==    by 0x3C95E040B4: dl_main (rtld.c:1717)
==31776==    by 0x3C95E151AA: _dl_sysdep_start (dl-sysdep.c:244)
==31776==    by 0x3C95E04EF1: _dl_start_final (rtld.c:336)
==31776==    by 0x3C95E04EF1: _dl_start (rtld.c:562)
==31776==    by 0x3C95E01537: ??? (in /usr/lib64/ld-2.15.so)
==31776== 
==31776== Invalid write of size 8
==31776==    at 0x40EC14: rolling(monster_description) (descriptions.cpp:968)
==31776==    by 0x40EF04: generate_monsters (descriptions.cpp:1031)
==31776==    by 0x409778: gen_monsters (npc.c:24)
==31776==    by 0x402B93: main (rlg229.c:106)
==31776==  Address 0x5840ff0 is 16 bytes after a block of size 32 in arena "client"
==31776== 
==31776== Invalid write of size 8
==31776==    at 0x40EC2F: rolling(monster_description) (descriptions.cpp:969)
==31776==    by 0x40EF04: generate_monsters (descriptions.cpp:1031)
==31776==    by 0x409778: gen_monsters (npc.c:24)
==31776==    by 0x402B93: main (rlg229.c:106)
==31776==  Address 0x5840ff8 is 24 bytes after a block of size 32 in arena "client"
==31776== 

valgrind: m_mallocfree.c:304 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 96, hi = 79985656.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==31776==    at 0x380A8FBF: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x380A90B4: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x380A9236: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x380B5D8D: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x380A2383: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x380A0E2B: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x380A4CAA: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x380A03A2: ??? (in /usr/lib64/valgrind/memcheck-amd64-linux)
==31776==    by 0x802DC4793: ???
==31776==    by 0x802BA1EEF: ???
==31776==    by 0x39C5415F: ???
==31776==    by 0x40EC27: rolling(monster_description) (descriptions.cpp:969)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable
==31776==    at 0x40EC40: rolling(monster_description) (descriptions.cpp:970)
==31776==    by 0x40EF04: generate_monsters (descriptions.cpp:1031)
==31776==    by 0x409778: gen_monsters (npc.c:24)
==AQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.
Q

